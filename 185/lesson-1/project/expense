#! /usr/bin/env ruby
require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec "SELECT * from expenses ORDER BY created_on;"
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    @connection.exec_params("INSERT INTO expenses (amount, memo, created_on) 
      VALUES ($1, $2, $3)", [amount, memo, Date.today])
  end

  def search_expenses(expense)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{expense}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    sql = "DELETE FROM expenses"
    @connection.exec(sql)
    puts "All expenses have been deleted."
  end

  def display_count(result)
    count = result.values.size
    if count == 0
      puts "There are no expenses."
    else
      puts "There are #{count} expense#{"s" if count != 1}."
    end
  end

  def setup_schema
    sql = <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL
    result = @connection.exec(sql)

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK(amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end

    
  end

  private

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ 
        tuple["id"].rjust(3),
        tuple["created_on"].rjust(10),
        tuple["amount"].rjust(12),
        tuple["memo"],
      ]

      puts columns.join(" | ")
    end

    puts "-" * 50
    amount_sum = expenses.field_values("amount").map(&:to_f).sum
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end
end

class CLI
  def initialize
    @app = ExpenseData.new
  end

  def run(arguments)
    case arguments[0]
    when "list"
      @app.list_expenses
    when "add"
      amount, memo = arguments[1], arguments[2]
      return add_error if amount.nil? || memo.nil?
      @app.add_expense(amount, memo)
    when "search"
      @app.search_expenses(arguments[1])
    when "delete"
      @app.delete_expense(arguments[1])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @app.delete_all_expenses if response == "y"
    else
      display_help
    end
  end

  def add_error
    puts "You must provide an amount and memo."
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands: 

      add AMOUNT M
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)




