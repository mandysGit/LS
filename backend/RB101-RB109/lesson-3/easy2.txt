1.
ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 402, "Eddie" => 10 }
See if "Spot" is present.

ages.has_key?("Spots")
ages.key?("Spots")
ages.member?("Spots")
ages.include?("Spots")


2.
munsters_description = "The Munsters are creepy in a good way."

munsters_description.swapcase!
=> ""tHE mUNSTERS ARE CREEPY IN A GOOD WAY."

munsters_description.capitalize!
=> "The munsters are creepy in a good way."

munsters_description.downcase!
=> "the munsters are creepy in a good way."

munsters_description.upcase!
=> ""THE MUNSTERS ARE CREEPY IN A GOOD WAY."


3.
ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10 }
additional_ages = { "Marilyn" => 22, "Spot" => 237 }

ages["Marilyn"] = additional_ages["Marilyn"]
ages["Spot"] = additional_ages["Spot"]

ages.merge!(additional_ages)


4.
advice = "Few things in life are as important as house training your pet dinosaur."

advice.match?(/Dino/)
advice.include?('Dino')


5.
flintstones = ["Fred", "Barney", "Wilma", "Betty", "BamBam", "Pebbles"]
flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)


6.
flintstones << "Dino"


7.
flintstones << 'Dino' << 'Hoppy'
flintstones.push('Dino').push('Hoppy')


8.
advice = "Few things in life are as important as house training your pet dinosaur."
advice.slice!(0, advice.index('house'))

If passed a start index and a length, returns a substring containing length characters starting at the start index

9.
statement = "The Flintstones Rock!"
statement.count('t')

10.
title = "Flintstone Family Members"
length_title = title.length
spaces = (40 - length_title)/2
title = (" " * spaces) + title + (" " * spaces)

or

title.center(40)